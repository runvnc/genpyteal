#!/usr/bin/env python3

import json
from redbaron import RedBaron
import sys

NL = "\n"

def catchdump(x):
  try:    
    return x.dumps()      
  except:
    pass  

def convertAll(red):
  try: 
    bools = red.find_all('boolean_operator')
    bools.map(convertBool)
    ifs = red.find_all('ifelseblock')
    ifs.map(convertIfs)
    strs_ = []
    cnt = 0 
    for nd in red:
      cnt += 1
      nodes = nd.find_all(['ifelseblock','atomtrailers'], recursive=False)
      strs = nodes.map(catchdump)
      strs = strs.filter(lambda x: x != None)
      strs_.extend(strs)
    if len(strs_) > 1:
      strlist = ',\n'.join(strs_)
      red.value = f"Seq([{strlist}]){NL}"    
  except BaseException as err:
    #print(f"Unexpected {err=}, {type(err)=}")  
    pass

def convertBool(boolOp):
  convertAll(boolOp.first)
  convertAll(boolOp.second)
  boolOp.parent.value = f"{boolOp.value.title()}({boolOp.first}, {boolOp.second})"

def convertIfs(if_):
  convertAll(if_.value)
  if_.value = f"If({if_.value[0].test.dumps()}, {if_.value[0].value.dumps()})\n\n"

def convert(fname):
  source = open(fname, "r")
  red = RedBaron(source.read())  
  fundefs = red.find_all('def')
  fundefs.map(convertAll)
  print("from pyteal import *\n")
  print(red.dumps())
  print('if __name__ == "__main__":\n    print(compileTeal(teal(), mode=Mode.Signature, version=2))')

convert(sys.argv[1])

